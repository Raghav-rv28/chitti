generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StreamLogs {
  id             String     @id @default(uuid())
  messageDetails Json       @default("{}")
  viewerId       String
  broadcastId    String
  channelId      String
  eventType      ChatEvents
  eventDetails   Json       @default("{}")
  StreamChat     StreamChat @relation(fields: [broadcastId], references: [id])
  User           User       @relation(fields: [channelId], references: [id])
  Viewer         Viewer     @relation(fields: [viewerId], references: [id])
}

enum ChatEvents {
  command
  timeout
}

model Chat {
  id          String     @id
  userId      String
  chatType    String
  message     String
  timestamp   DateTime   @default(now())
  broadcastId String     @default("")
  viewerId    String?
  username    String
  StreamChat  StreamChat @relation(fields: [broadcastId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
  Viewer      Viewer?    @relation(fields: [viewerId], references: [id])
}

model CustomCommand {
  id                String   @id @default(uuid())
  userId            String
  trigger           String   @unique
  response          String
  description       String   @default("some description")
  enabled           Boolean  @default(true)
  createdAt         DateTime @default(now())
  cooldown          Int      @default(0)
  requiredUserLevel Role
  User              User     @relation(fields: [userId], references: [id])
}

model StreamChat {
  id             String       @id
  userId         String
  title          String?
  streamUrl      String?
  liveChatId     String       @default("")
  contentDetails Json         @default("{}")
  description    String       @default("")
  startTime      DateTime
  endTime        DateTime?
  duration       Int?
  totalDonations Float?       @default(0)
  totalViews     Int?         @default(0)
  Chat           Chat[]
  User           User         @relation(fields: [userId], references: [id])
  Viewer         Viewer[]
  StreamLogs     StreamLogs[]
}

model User {
  id            String          @id @unique
  email         String?         @unique
  createdAt     DateTime        @default(now())
  settings      Json?
  statistics    Json            @default("{}")
  username      String?         @unique
  Chat          Chat[]
  CustomCommand CustomCommand[]
  StreamChat    StreamChat[]
  UserSecurity  UserSecurity?
  Viewer        Viewer[]
  Moderation    Moderation[]
  StreamLogs    StreamLogs[]
}

model Moderation {
  id         String @id @default(uuid())
  userId     String
  general    Json?
  spamConfig Json?
  links      Json?
  blacklist  Json?
  User       User   @relation(fields: [userId], references: [id])
}

model UserSecurity {
  userId       String    @id @unique
  accessToken  String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  expiresAt    DateTime?
  User         User      @relation(fields: [userId], references: [id])
}

model Viewer {
  id               String       @id
  viewerId         String       @default("")
  userChannelId    String
  username         String
  hoursWatched     Float?
  points           Int          @default(0)
  banned           Boolean      @default(false)
  bannedTimePeriod Int          @default(0)
  createdAt        DateTime     @default(now())
  streakDays       Int          @default(0)
  streamChatId     String
  totalMessages    Int          @default(0)
  Chat             Chat[]
  StreamChat       StreamChat   @relation(fields: [streamChatId], references: [id])
  User             User         @relation(fields: [userChannelId], references: [id])
  StreamLogs       StreamLogs[]

  @@unique([viewerId, userChannelId, streamChatId])
}

enum Role {
  moderation
  owner
  viewer
}
